// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewards/task.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskType int32

const (
	TaskType_UNKNOWN                                TaskType = 0
	TaskType_CREATE_USER                            TaskType = 1
	TaskType_CREATE_NON_EMPTY_REPO                  TaskType = 2
	TaskType_CREATE_ISSUE                           TaskType = 3
	TaskType_CREATE_ISSUE_WITH_BOUNTY               TaskType = 4
	TaskType_CREATE_ISSUE_WITH_BOUNTY_VERIFIED      TaskType = 5
	TaskType_PR_TO_REPO_MERGED                      TaskType = 6
	TaskType_PR_TO_VERIFIED_REPO_MERGED             TaskType = 7
	TaskType_PR_TO_VERIFIED_REPO_MERGED_WITH_BOUNTY TaskType = 8
	TaskType_LORE_STAKED                            TaskType = 9
	TaskType_VOTE_PROPOSAL                          TaskType = 10
)

var TaskType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "CREATE_USER",
	2:  "CREATE_NON_EMPTY_REPO",
	3:  "CREATE_ISSUE",
	4:  "CREATE_ISSUE_WITH_BOUNTY",
	5:  "CREATE_ISSUE_WITH_BOUNTY_VERIFIED",
	6:  "PR_TO_REPO_MERGED",
	7:  "PR_TO_VERIFIED_REPO_MERGED",
	8:  "PR_TO_VERIFIED_REPO_MERGED_WITH_BOUNTY",
	9:  "LORE_STAKED",
	10: "VOTE_PROPOSAL",
}

var TaskType_value = map[string]int32{
	"UNKNOWN":                                0,
	"CREATE_USER":                            1,
	"CREATE_NON_EMPTY_REPO":                  2,
	"CREATE_ISSUE":                           3,
	"CREATE_ISSUE_WITH_BOUNTY":               4,
	"CREATE_ISSUE_WITH_BOUNTY_VERIFIED":      5,
	"PR_TO_REPO_MERGED":                      6,
	"PR_TO_VERIFIED_REPO_MERGED":             7,
	"PR_TO_VERIFIED_REPO_MERGED_WITH_BOUNTY": 8,
	"LORE_STAKED":                            9,
	"VOTE_PROPOSAL":                          10,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0552f51de1f8bcf, []int{0}
}

type Task struct {
	Type       TaskType `protobuf:"varint,1,opt,name=type,proto3,enum=gitopia.gitopia.rewards.TaskType" json:"type,omitempty"`
	IsComplete bool     `protobuf:"varint,2,opt,name=isComplete,proto3" json:"isComplete,omitempty"`
	Weight     int32    `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0552f51de1f8bcf, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_UNKNOWN
}

func (m *Task) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *Task) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.rewards.TaskType", TaskType_name, TaskType_value)
	proto.RegisterType((*Task)(nil), "gitopia.gitopia.rewards.Task")
}

func init() { proto.RegisterFile("rewards/task.proto", fileDescriptor_e0552f51de1f8bcf) }

var fileDescriptor_e0552f51de1f8bcf = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0xae, 0xd2, 0x40,
	0x14, 0x87, 0x3b, 0x5c, 0x2e, 0x17, 0xcf, 0xf5, 0xcf, 0x30, 0x09, 0x5a, 0x89, 0x99, 0x80, 0x89,
	0x86, 0xb0, 0x28, 0x89, 0xc6, 0x07, 0x00, 0x3a, 0x6a, 0x03, 0x74, 0x9a, 0xe9, 0x14, 0x82, 0x9b,
	0x49, 0xd1, 0x06, 0x1a, 0x24, 0x6d, 0x68, 0x09, 0xf2, 0x16, 0xbe, 0x82, 0x6f, 0xe3, 0x92, 0xa5,
	0x4b, 0x03, 0x2f, 0x62, 0xc0, 0x36, 0x17, 0x16, 0xac, 0x4e, 0xe6, 0xf7, 0x7d, 0x39, 0x33, 0x93,
	0x73, 0xa0, 0x36, 0x0b, 0xd3, 0x28, 0x0e, 0xfd, 0xf6, 0x2a, 0xd8, 0xf8, 0xab, 0x6f, 0x49, 0x3b,
	0xf5, 0x93, 0x85, 0x11, 0xaf, 0xa2, 0x34, 0x22, 0x2f, 0x32, 0x66, 0xe4, 0x35, 0x73, 0x5e, 0xaf,
	0xa1, 0x28, 0xfd, 0x64, 0x41, 0x3e, 0x40, 0x31, 0xdd, 0xc6, 0x81, 0x8e, 0xea, 0xa8, 0xf9, 0xf4,
	0x5d, 0xc3, 0xb8, 0xe2, 0x1b, 0xc7, 0x9e, 0x72, 0x1b, 0x07, 0xe2, 0xa4, 0x13, 0x0a, 0x10, 0x26,
	0xbd, 0x68, 0x19, 0x7f, 0x0f, 0xd2, 0x40, 0x2f, 0xd4, 0x51, 0xb3, 0x2c, 0xce, 0x12, 0xf2, 0x1c,
	0x4a, 0x9b, 0x20, 0x9c, 0xcd, 0x53, 0xfd, 0xa6, 0x8e, 0x9a, 0xb7, 0x22, 0x3b, 0xb5, 0x7e, 0x15,
	0xa0, 0x9c, 0xb7, 0x22, 0xf7, 0x70, 0xe7, 0xd9, 0x7d, 0x9b, 0x8f, 0x6d, 0xac, 0x91, 0x67, 0x70,
	0xdf, 0x13, 0xac, 0x23, 0x99, 0xf2, 0x5c, 0x26, 0x30, 0x22, 0x2f, 0xa1, 0x9a, 0x05, 0x36, 0xb7,
	0x15, 0x1b, 0x3a, 0x72, 0xa2, 0x04, 0x73, 0x38, 0x2e, 0x10, 0x0c, 0x8f, 0x33, 0x64, 0xb9, 0xae,
	0xc7, 0xf0, 0x0d, 0x79, 0x05, 0xfa, 0x79, 0xa2, 0xc6, 0x96, 0xfc, 0xac, 0xba, 0xdc, 0xb3, 0xe5,
	0x04, 0x17, 0xc9, 0x1b, 0x68, 0x5c, 0xa3, 0x6a, 0xc4, 0x84, 0xf5, 0xd1, 0x62, 0x26, 0xbe, 0x25,
	0x55, 0xa8, 0x38, 0x42, 0x49, 0x7e, 0xba, 0x46, 0x0d, 0x99, 0xf8, 0xc4, 0x4c, 0x5c, 0x22, 0x14,
	0x6a, 0xff, 0xe3, 0x5c, 0xbd, 0xe0, 0x77, 0xa4, 0x05, 0x6f, 0xaf, 0xf3, 0x8b, 0x97, 0x94, 0x8f,
	0xbf, 0x1c, 0x70, 0xc1, 0x94, 0x2b, 0x3b, 0x7d, 0x66, 0xe2, 0x47, 0xa4, 0x02, 0x4f, 0x46, 0x5c,
	0x32, 0xe5, 0x08, 0xee, 0x70, 0xb7, 0x33, 0xc0, 0xd0, 0x35, 0x7f, 0xef, 0x29, 0xda, 0xed, 0x29,
	0xfa, 0xbb, 0xa7, 0xe8, 0xe7, 0x81, 0x6a, 0xbb, 0x03, 0xd5, 0xfe, 0x1c, 0xa8, 0xf6, 0xa5, 0x35,
	0x0b, 0xd3, 0xf9, 0x7a, 0x6a, 0x7c, 0x8d, 0x96, 0xed, 0x7c, 0xe8, 0x79, 0xfd, 0xf1, 0x30, 0xfe,
	0x6d, 0x1c, 0x24, 0xd3, 0xd2, 0x69, 0x01, 0xde, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x67,
	0xd2, 0x9b, 0x1e, 0x02, 0x00, 0x00,
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if m.IsComplete {
		i--
		if m.IsComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTask(uint64(m.Type))
	}
	if m.IsComplete {
		n += 2
	}
	if m.Weight != 0 {
		n += 1 + sovTask(uint64(m.Weight))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsComplete = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
